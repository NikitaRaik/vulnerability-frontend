import React, { useState, useEffect } from 'react';
import { useHistory } from 'react-router';
import { Navbar, Container, Row, Col, Alert, Button, Table, Modal, Form, Stack, Toast } from 'react-bootstrap';
import { FaUserCircle, FaPen, FaTrashAlt, FaCheck } from 'react-icons/fa';
import auth from '../auth/auth';

export const Home = (props) => {
  const [show, setShow] = useState(false);
  const [showA, setShowA] = useState(false);
  const [showDialog, setShowDialog] = useState(false);
  const [user, setUser] = useState({
    "id": "",
    "email": "",
    "is_active": true,
    "is_superuser": false,
    "firstName": "",
    "lastName": ""
  });

  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [formVulnerability, setFormVulnerability] = useState({});
  const [isEdit, setIsEdit] = useState(0);
  const modalTexts = {
    title: ['Edit Vulnerability Solution', 'Add Vulnerability Solution'],
    button: ['Save Changes', 'Add']
  }

  const toggleShowA = () => setShowA(!showA);

  const handleClose = () => {
    setShow(false);
    setFormVulnerability({_id: '', type: '', cve: '', name: '', solution: ''})
  }

  const hideDialog = () => {
    setShowDialog(false)
  }

  const showDeleteDialog = (vulnerability, index) => {
    setFormVulnerability(vulnerability);
    setShowDialog(true)
  }

  const deleteVulnerability = async () => {
    setShowDialog(false)
    const deleteResult = await auth.deleteVulnerability(formVulnerability);
    if(deleteResult.result){
      setShowA(true)
    }
  }
  // History hook
  const history = useHistory();

  // User information hook

  // Fetch user information on page load
  useEffect(() => {
    const fetchData = async () => {
      if (auth.isAuthenticated()){
        const result = await auth.getUser();
        setUser(result);
        const vulnerabilities_result = await auth.getVulnerabilities();
        setVulnerabilities(vulnerabilities_result)
      };
    };
    fetchData();
  // eslint-disable-next-line
  }, []);

  // Function to call logout
  const callLogout = async () => {
    auth.logout(() => {
      history.push('/');
    });
  };

  const showEditModal = (vulnerability, index) => {
    setFormVulnerability(vulnerability);
    setIsEdit(0);
    setShow(true);
  }

  const showAddModal = () => {
    setFormVulnerability({_id: '', type: '', cve: '', name: '', solution: ''});
    setIsEdit(1);
    setShow(true);
  }

  const changeFormInput = (event, type) => {
    var tempFormVulnerability = {...formVulnerability};
    tempFormVulnerability[type] = event.target.value;
    setFormVulnerability(tempFormVulnerability);
  }

  const saveChange = async () => {
    if(isEdit === 0) {
      const updateResult = await auth.saveVulnerability(formVulnerability);
      if(updateResult._id){
        setShowA(true)
        setShow(false)
      }
    } else {
      const addResult = await auth.addVulnerability(formVulnerability);
      if(addResult._id){
        setShowA(true)
        setShow(false)
      }
    }
  }
  
  return (
    <>
      <Toast show={showA} onClose={toggleShowA} delay={4000} autohide position="top-end" bg="success" style={{ position: 'fixed', top: '10px', right: '10px', zIndex: '100' }}>
        <Toast.Header>
          <FaCheck size={18} />
          <strong className="mx-2">Success</strong>
        </Toast.Header>
        <Toast.Body>Vulnerability solution is updated successfully.</Toast.Body>
      </Toast>
      <Navbar className="align-middle justify-content-between" bg="dark" variant="dark">
        <div>
          <Navbar.Brand href="/">
            <img
              alt=""
              src={require("../images/logo.svg")}
              width="40"
              height="40"
              className="d-inline-block align-top"
            />
            <strong>Vulnerability Solutions</strong>
          </Navbar.Brand>
        </div>
        <div>
          <label className="ml-4 text-white" style={{}}><FaUserCircle size={21}/></label>
          <label className="ml-4 text-white">{user.firstName+" "+user.lastName}</label>
          <Button className="ml-4" variant="outline-light" onClick={callLogout}>Log Out</Button>
        </div>
      </Navbar>
      <Container className="mt-4">
        <Stack direction="horizontal" style={{justifyContent: 'flex-end'}}>
          <Button variant="primary" onClick={showAddModal}>Add New</Button>
        </Stack>
        <Row>
          <Col className="mt-4">
            <h2>Welcome {user.firstName}!</h2>
            <Alert variant={'primary'}>You have been successfully authenticated.</Alert>
          </Col>
        </Row>
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>#</th>
              <th>Type</th>
              <th>CVE</th>
              <th>Vulnerability</th>
              <th>Solution</th>
              {user.is_superuser ? (<th>Actions</th>) : (<></>)}
            </tr>
          </thead>
          <tbody>
            {vulnerabilities.map((vulnerability, index) => (
              <tr key={vulnerability['_id']}>
                <td>{index+1}</td>
                <td>{vulnerability.type}</td>
                <td>{vulnerability.cve}</td>
                <td>{vulnerability.name}</td>
                <td>{vulnerability.solution}</td>
                {user.is_superuser ? (
                  <td>
                    <Button variant="primary" size="sm" onClick={() => {showEditModal(vulnerability, index)}}>
                      <FaPen size={14} />
                    </Button>
                    <Button variant="danger" size="sm" className="ml-1 mx-1" onClick={() => {showDeleteDialog(vulnerability, index)}}>
                      <FaTrashAlt size={14} />
                    </Button>
                  </td>
                ) : (<></>)}
              </tr>
            ))}
          </tbody>
        </Table>
        <Modal show={show} onHide={handleClose}>
          <Modal.Header closeButton>
            <Modal.Title>{modalTexts.title[isEdit]}</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form>
              <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
                <Form.Control
                  type="hidden"
                  value={formVulnerability._id}
                />
                <Form.Label>Type</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="type..."
                  value={formVulnerability.type}
                  onChange={(event)=>{changeFormInput(event, 'type')}}
                />
              </Form.Group>
              <Form.Group
                className="mb-3"
              >
                <Form.Label>CVE</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="cve..."
                  value={formVulnerability.cve}
                  onChange={(event)=>{changeFormInput(event, 'cve')}}
                />
              </Form.Group>
              <Form.Group
                className="mb-3"
              >
                <Form.Label>Name</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="name..."
                  value={formVulnerability.name}
                  onChange={(event)=>{changeFormInput(event, 'name')}}
                />
              </Form.Group>
              <Form.Group
                className="mb-3"
              >
                <Form.Label>Solution</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="solution..."
                  value={formVulnerability.solution}
                  onChange={(event)=>{changeFormInput(event, 'solution')}}
                />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={handleClose}>
              Close
            </Button>
            <Button variant="primary" onClick={saveChange}>
              {modalTexts.button[isEdit]}
            </Button>
          </Modal.Footer>
        </Modal>


        <Modal show={showDialog} onHide={hideDialog} aria-labelledby="contained-modal-title-vcenter" centered>
          <Modal.Header closeButton>
            <h5>Are you sure remove this vulnerability solution?</h5>
          </Modal.Header>
          <Modal.Footer>
            <Button variant="danger" onClick={deleteVulnerability}>
              Delete
            </Button>
            <Button variant="secondary" onClick={hideDialog}>
              Cancel
            </Button>
          </Modal.Footer>
        </Modal>
      </Container>
    </>
  );
};
